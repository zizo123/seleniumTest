Callable interface has call() method that returns a value (generic type) and can throw a checked exception. 
Runnable has run() method that returns void and cannot throw any checked exceptions. 
Runnable and Callable statements both take no method arguments as input.

Atomic is the property of an operation to be carried out as a single unit of execution without any interference by another thread. 
A thread-safe atomic version of the increment ++ operator would be one that performed the read and write of the variable as a single
operation, not allowing any other threads to access the variable during the operation.

If a task is submitted to a thread executor, and the thread executor does not have any available threads, the call to the task will 
return immediately with the task being queued internally by the thread executor. 

Deadlock occurs when two or more threads are blocked forever, each waiting on the other.
Starvation occurs when a single thread is perpetually denied access to a shared resource or lock. 
The thread is still active, but it is unable to complete its work as a result of other threads constantly taking the resource that they trying to access.
Livelock occurs when two or more threads are conceptually blocked forever, although they are each still active and trying to complete their task. 
Livelock is a special case of resource starvation in which two or more threads actively try to acquire a set of locks, are unable to
do so, and restart part of the process.
Livelock is often a result of two threads trying to resolve a deadlock.

If The thread executor is never shut down; the code will run and will never terminate.

A thread is the smallest unit of execution that can be scheduled by the operating system. 
A process is a group of associated threads that execute in the same, shared environment. 
A task is a single unit of work performed by a thread.
A single-threaded process is one that contains exactly one thread, whereas a multi-threaded process is one that contains one or more threads.
By shared environment, we mean that the threads in the same process share the same memory space and can communicate directly with one another. 
Remember from your OCA studies that static methods and variables are defined on a single class object that all instances share. 
For example, if one thread updates the value of a static object, then this information is immediately available for other threads within the process to read.

All Java applications are all multi-threaded (system thread) is created by the JVM and runs in the background of the application.
For example, the garbage-collection thread is a system thread that is created by the JVM and runs in the background, helping to free memory that is 
no longer in use.

Concurrency is the property of executing multiple threads and processes at the same time.

Operating systems use a thread scheduler to determine which threads should be currently executing.It may employ a round-robin schedule in which 
each available thread receives an equal number of CPU cycles with which to execute, with threads visited in a circular order.
A context switch is the process of storing a thread’s current state and later restoring the state of the thread to continue execution.
A thread priority is a numeric value associated with a thread that is taken into consideration by the thread scheduler when determining which threads
should currently be executing.

ExecutorService creates and manages threads for you. You first obtain an instance of an ExecutorService interface, and then you send the service 
tasks to be processed. The Concurrency API includes the Executors factory class that can be used to create instances of the ExecutorService object.
Failing to call shutdown() will result in your application never terminating.

Submitting Tasks : 
The execute() method is considered a “fire-and-forget” method, as once it is submitted, the results are not directly available to the calling thread.
submit() returns a Future object that can be used to determine if the task is complete.It can also be used to return a generic result object after 
the task has been completed.

Method Name 								Return Type 						Description
newSingleThreadExecutor() 					ExecutorService 					Creates a single-threaded executor that
																				uses a single worker thread operating
																				off an unbounded queue. Results are
																				processed sequentially in the order in
																				which they are submitted.

newSingleThreadScheduledExecutor()			ScheduledExecutorService			Creates a single-threaded executor that
																				can schedule commands to run after a
																				given delay or to execute periodically.
																									
newCachedThreadPool() 						ExecutorService 					Creates a thread pool that creates new
																				threads as needed, but will reuse previously constructed
																				threads when they are available.
																				
newFixedThreadPool(int nThreads)			ExecutorService						Creates a thread pool that reuses a
																				fixed number of threads operating off a
																				shared unbounded queue.
 
newScheduledThreadPool(int nThreads)		ScheduledExecutorService			Creates a thread pool that can schedule
																				commands to run after a given delay or
																				to execute periodically.			
																				